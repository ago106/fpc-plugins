# -*- coding: utf-8 -*-
from __future__ import annotations

import asyncio
import threading
import logging
from logging import Filter
import requests
import json
import os
import base64
import re
import io
import datetime
import time
import random
import subprocess
import sys
import atexit
from typing import TYPE_CHECKING, Dict, List, Tuple, Optional

try:
    import matplotlib.pyplot as plt
    import pymysql
except ImportError:
    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è matplotlib...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "matplotlib", "pymysql"])
    import matplotlib.pyplot as plt

try:
    from tonutils.client import TonapiClient
    from tonutils.wallet import WalletV5R1

except ImportError:
    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è tonutils...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "tonutils"])
    from tonutils.client import TonapiClient
    from tonutils.wallet import WalletV5R1

try:
    import httpx
except ImportError:
    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è httpx...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "httpx"])
    import httpx

try:
    from FunPayAPI.updater.events import NewOrderEvent, NewMessageEvent
    from FunPayAPI import Account, enums
    from telebot import types
    from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
    import telebot
    import FunPayAPI
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–æ–¥—É–ª–µ–π...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "pyTelegramBotAPI"])
    from FunPayAPI.updater.events import NewOrderEvent, NewMessageEvent
    from FunPayAPI import Account, enums
    from telebot import types
    from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
    import telebot
    import FunPayAPI

if TYPE_CHECKING:
    from cardinal import Cardinal

if sys.platform == 'win32':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

CONFIG_FILE = "plugins/stars_config.json"


def sanitize_telegram_text(text: str) -> str:
    text = text.replace("<", "<").replace(">", ">")
    text = text.encode("utf-8", errors="replace").decode("utf-8", errors="replace")
    return text


default_config = {
    "API_KEY": "AGO5V4UG5EIUDRQAAAAMBAL56YZMLCRO7OKF4D6XT5IHRYI6NL23WD6KLQZWSSVTXLJ6S7I",
    "IS_TESTNET": False,
    "MNEMONIC": [
        "word1", "word2", "word3", "word4", "word5", "word6",
        "word7", "word8", "word9", "word10", "word11", "word12",
        "word13", "word14", "word15", "word16", "word17", "word18",
        "word19", "word20", "word21", "word22", "word23", "word24"
    ],
    "DESTINATION_ADDRESS": "UQCFJEP4WZ_mpdo0_kMEmsTgvrMHG7K_tWY16pQhKHwoOtFz",
    "ALLOWED_QUANTITIES": [10, 15, 25, 50, 75, 100, 150, 200, 250, 350, 500, 1000, 2500],
    "fragment_api": {
        "hash": "YOUR_FRAGMENT_HASH",
        "cookie": "YOUR_FRAGMENT_COOKIE",
        "url": "https://fragment.com/api",
        "subcategory_id": 2418
    },
    "user_id": 8029299947,
    "completed_order_message": """‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!
üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {ton_viewer_url}
‚≠êÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ Stars: {quantity}
üîë Ref ID: Ref#{ref_id}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑: https://funpay.com/orders/{orderID}/
""",
    "AUTO_REFUND": False,
    "SHOW_SENDER": "0",
    "USE_OLD_BALANCE": False
}


def load_config() -> dict:
    os.makedirs(os.path.dirname(CONFIG_FILE), exist_ok=True)
    if not os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=4, ensure_ascii=False)
    with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
        config = json.load(f)
    for key in default_config:
        if key not in config:
            config[key] = default_config[key]
    if "fragment_api" not in config:
        config["fragment_api"] = default_config["fragment_api"]
    else:
        for frag_key in default_config["fragment_api"]:
            if frag_key not in config["fragment_api"]:
                config["fragment_api"][frag_key] = default_config["fragment_api"][frag_key]
    if "user_id" not in config:
        config["user_id"] = default_config["user_id"]
    if "completed_order_message" not in config:
        config["completed_order_message"] = default_config["completed_order_message"]
    if "AUTO_REFUND" not in config:
        config["AUTO_REFUND"] = default_config["AUTO_REFUND"]
    if "SHOW_SENDER" not in config:
        config["SHOW_SENDER"] = default_config["SHOW_SENDER"]
    if "USE_OLD_BALANCE" not in config:
        config["USE_OLD_BALANCE"] = default_config["USE_OLD_BALANCE"]
    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=4, ensure_ascii=False)
    return config


config = load_config()

API_KEY = config["API_KEY"]
IS_TESTNET = config["IS_TESTNET"]
MNEMONIC: list[str] = config["MNEMONIC"]
DESTINATION_ADDRESS = config["DESTINATION_ADDRESS"]
ALLOWED_QUANTITIES = config["ALLOWED_QUANTITIES"]
USER_ID = config["user_id"]
COMPLETED_ORDER_MESSAGE = config["completed_order_message"]
SHOW_SENDER = config["SHOW_SENDER"]

logger = logging.getLogger("FPC.autostars")
logger.setLevel(logging.DEBUG)

FRAGMENT_HASH = config["fragment_api"]["hash"]
FRAGMENT_COOKIE = config["fragment_api"]["cookie"]
FRAGMENT_URL = config["fragment_api"]["url"]
SUBCATEGORY_ID = config["fragment_api"].get("subcategory_id", 2418)

url = f"{FRAGMENT_URL}?hash={FRAGMENT_HASH}"
headers = {
    "Accept": "application/json, text/javascript, */*; q=0.01",
    "Accept-Encoding": "gzip, deflate, br, zstd",
    "Accept-Language": "ru",
    "Connection": "keep-alive",
    "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
    "Cookie": FRAGMENT_COOKIE,
    "Host": "fragment.com",
    "Origin": "https://fragment.com",
    "Referer": "https://fragment.com/stars/buy",
    "Sec-Fetch-Dest": "empty",
    "Sec-Fetch-Mode": "cors",
    "Sec-Fetch-Site": "same-origin",
    "User-Agent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:131.0) Gecko/20010101 Firefox/131.0",
    "X-Requested-With": "XMLHttpRequest"
}

def decoder(data: str) -> bytes:
    while len(data) % 4 != 0:
        data += "="
    return base64.b64decode(data)


def decoder2(data: bytes) -> str:
    decoded_data = data.decode('latin1')
    ref_id = decoded_data.split("Ref#")[-1]
    return ref_id


def remove_at_symbol(username: str) -> str:
    if username.startswith('@'):
        return username[1:]
    return username


def generate_order_graph(date_str: str) -> io.BytesIO:
    if date_str not in stats_data:
        return None

    day_stats = stats_data[date_str]
    successful = day_stats.get("successful_transactions", 0)
    unsuccessful = day_stats.get("unsuccessful_transactions", 0)
    quantities = day_stats.get("quantities_sold", {})

    categories = list(quantities.keys())
    quantities_sold = list(quantities.values())

    fig, ax = plt.subplots(figsize=(8, 6))

    ax.bar(['–£—Å–ø–µ—à–Ω—ã–µ', '–ù–µ—É—Å–ø–µ—à–Ω—ã–µ'], [successful, unsuccessful], color=['green', 'red'], label="–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤")

    ax2 = ax.twinx()
    ax2.bar(categories, quantities_sold, color='blue', alpha=0.5, label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars")

    ax.set_xlabel('–¢–∏–ø—ã –∑–∞–∫–∞–∑–æ–≤')
    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
    ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö Stars')

    plt.title(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö Stars –∑–∞ {date_str}")
    fig.tight_layout()

    image_stream = io.BytesIO()
    plt.savefig(image_stream, format='png')
    image_stream.seek(0)
    plt.close(fig)

    return image_stream


STATS_FILE = "plugins/stars_stats.json"


def load_stats() -> dict:
    os.makedirs(os.path.dirname(STATS_FILE), exist_ok=True)
    if not os.path.exists(STATS_FILE):
        with open(STATS_FILE, 'w', encoding='utf-8') as f:
            json.dump({}, f, ensure_ascii=False)
    with open(STATS_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)


def save_stats(stats_data: dict):
    with open(STATS_FILE, 'w', encoding='utf-8') as f:
        json.dump(stats_data, f, indent=4, ensure_ascii=False)


stats_data = load_stats()


def send_error_with_inline_url(c, USER_ID, orderID: str, error: str):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑ FunPay",
            url=f"https://funpay.com/orders/{orderID}/"
        )
    )
    keyboard.add(
        InlineKeyboardButton(
            text="–í–µ—Ä–Ω—É—Ç—å –∑–∞–∫–∞–∑",
            callback_data=f"refund_order_{orderID}"
        )
    )

    text_message = (
        f"üî¥ –£ –≤–∞—Å –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∑–∞–∫–∞–∑–µ #{orderID}\n"
        f"–û—à–∏–±–∫–∞: {error}\n"
        "–ü—Ä–æ—Å—å–±–∞ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞"
    )

    c.telegram.bot.send_message(
        USER_ID,
        sanitize_telegram_text(text_message),
        reply_markup=keyboard
    )


def update_stats(success: bool, quantity: int):
    date_str = datetime.datetime.now().strftime("%Y-%m-%d")
    if date_str not in stats_data:
        stats_data[date_str] = {
            "successful_transactions": 0,
            "unsuccessful_transactions": 0,
            "quantities_sold": {},
            "transactions": []
        }
    if success:
        stats_data[date_str]["successful_transactions"] += 1
    else:
        stats_data[date_str]["unsuccessful_transactions"] += 1
    q_str = str(quantity)
    if q_str not in stats_data[date_str]["quantities_sold"]:
        stats_data[date_str]["quantities_sold"][q_str] = 0
    stats_data[date_str]["quantities_sold"][q_str] += 1
    now_time = datetime.datetime.now().strftime("%H:%M:%S")
    stats_data[date_str]["transactions"].append({
        "time": now_time,
        "quantity": quantity,
        "status": "success" if success else "fail"
    })
    save_stats(stats_data)


async def check_wallet_balance() -> float:
    client = TonapiClient(api_key=API_KEY, is_testnet=IS_TESTNET)
    wallet, public_key, private_key, mnemonic = WalletV5R1.from_mnemonic(client, MNEMONIC)
    balance_nano = await wallet.balance()
    if config["USE_OLD_BALANCE"]:
        balance_ton = balance_nano
    else:
        balance_ton = balance_nano / 1_000_000_000
    logger.debug(f"–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {balance_ton} TON")
    return balance_nano


async def send_ton_transaction(amount: float, comment: str) -> Tuple[Optional[str], Optional[str], Optional[str]]:
    client = TonapiClient(api_key=API_KEY, is_testnet=IS_TESTNET)
    wallet, public_key, private_key, mnemonic = WalletV5R1.from_mnemonic(client, MNEMONIC)
    balance_ton = await check_wallet_balance()
    if balance_ton < amount:
        error_msg = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è: {amount} TON, –¥–æ—Å—Ç—É–ø–Ω–æ: {balance_ton} TON."
        logger.warning(error_msg)
        return None, None, error_msg

    async def send_transaction_task():
        try:
            tx_hash = await wallet.transfer(
                destination=DESTINATION_ADDRESS,
                amount=amount,
                body=comment,
            )
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} TON! TX Hash: {tx_hash}")
            await asyncio.sleep(random.randint(2, 10))
            logger.debug(f"–°—Å—ã–ª–∫–∞ Tonviewer: https://tonviewer.com/transaction/{tx_hash}")
            ref_id = comment.split("Ref#")[-1].strip()
            return tx_hash, ref_id, None
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}"
            logger.error(error_msg)
            return None, None, error_msg

    task = asyncio.create_task(send_transaction_task())
    result = await task
    return result


async def main_async(username: str, quantity: int) -> Tuple[Optional[str], Optional[str], int, Optional[str]]:
    if quantity:
        clean_username = remove_at_symbol(username)
        logger.debug(f"–û—á–∏—Å—Ç–µ–Ω–Ω—ã–π username: {clean_username}")
        payload_search = {
            "query": clean_username,
            "quantity": quantity,
            "method": "searchStarsRecipient"
        }
        logger.debug(f"Payload –¥–ª—è –ø–æ–∏—Å–∫–∞ recipient: {payload_search}")
        try:
            response_search = requests.post(url, headers=headers, data=payload_search)
            response_search.raise_for_status()
            logger.debug(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ–∏—Å–∫ recipient): {response_search.text}")
            if not response_search.text:
                error_msg = "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Fragment –ø—Ä–∏ –ø–æ–∏—Å–∫–µ recipient."
                logger.error(error_msg)
                return None, None, quantity, error_msg
            try:
                text_search = response_search.json()
            except json.JSONDecodeError as e:
                error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON: {e}. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_search.text}"
                logger.error(error_msg)
                return None, None, quantity, error_msg
            logger.debug(f"JSON –ø–æ–∏—Å–∫–∞ recipient: {text_search}")
        except requests.RequestException as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–∏—Å–∫–∞ recipient: {e}"
            logger.error(error_msg)
            return None, None, quantity, error_msg
        if text_search.get('ok') is True:
            recipient = text_search.get('found', {}).get('recipient')
            if not recipient:
                error_msg = f"Recipient –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ: {text_search}"
                logger.error(error_msg)
                return None, None, quantity, error_msg
        else:
            error_detail = text_search.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ recipient.')
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ recipient: {error_detail}"
            logger.error(error_msg)
            return None, None, quantity, error_msg
        payload_init = {
            "recipient": recipient,
            "quantity": quantity,
            "method": "initBuyStarsRequest"
        }
        logger.debug(f"Payload –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏: {payload_init}")
        try:
            response_init = requests.post(url, headers=headers, data=payload_init)
            response_init.raise_for_status()
            logger.debug(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏): {response_init.text}")
            if not response_init.text:
                error_msg = "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Fragment –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏."
                logger.error(error_msg)
                return None, None, quantity, error_msg
            try:
                text_init = response_init.json()
            except json.JSONDecodeError as e:
                error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON: {e}. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_init.text}"
                logger.error(error_msg)
                return None, None, quantity, error_msg
            logger.debug(f"JSON –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏: {text_init}")
        except requests.RequestException as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ Stars: {e}"
            logger.error(error_msg)
            return None, None, quantity, error_msg
        req_id = text_init.get('req_id')
        try:
            AMOUNT = float(text_init.get('amount', 0))
            logger.debug(f"–¢—Ä–µ–±—É–µ–º–∞—è —Å—É–º–º–∞: {AMOUNT} TON")
        except (TypeError, ValueError):
            AMOUNT = 0
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å 'amount' –≤ float.")
        if not req_id or AMOUNT == 0:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å req_id –∏–ª–∏ amount: {text_init}"
            logger.error(error_msg)
            return None, None, quantity, error_msg
        payload_link = {
            "account": '{"address":"0:adc5b49f73e4796ecc3c290ad0d89f87fa552b515d173d5295469df9612c24a","chain":"-239","walletStateInit":"te6ccgECFgEAAwQAAgE0AQIBFP8A9KQT9LzyyAsDAFEAAAAAKamjF5hE%2BFriD8Ufe710n9USsAZBzBxLOlXNYCYDiPBRvJZXQAIBIAQFAgFIBgcE%2BPKDCNcYINMf0x%2FT%2F%2FQE0VFDuvKhUVG68qIF%2BQFUEGT5EPKj%2BAAkpMjLH1JAyx9SMMv%2FUhD0AMntVPgPAdMHIcAAn2xRkyDXSpbTB9QC%2BwDoMOAhwAHjACHAAuMAAcADkTDjDQOkyMsfEssfy%2F8SExQVAubQAdDTAyFxsJJfBOAi10nBIJJfBOAC0x8hghBwbHVnvSKCEGRzdHK9sJJfBeAD%2BkAwIPpEAcjKB8v%2FydDtRNCBAUDXIfQEMFyBAQj0Cm%2BhMbOSXwfgBdM%2FyCWCEHBsdWe6kjgw4w0DghBkc3RyupJJfBuMNCAkCASAKCwB4AfoA9AQw%2BCdvIjBQCqEhvvLgUIIQcGx1Z4MesXCAGFAEywUmzxZY%2BgIZ9ADLaRfLH1Jgyz8gyYBA%2BwAGAIpQBIEBCPRZMO1E0IEBQNcgyAHPFvQAye1UAXKwjiOCEGRzdHKDHrFwgBhQBcsFUAPPFiP6AhPLassfyz%2FJgED7AJJfA%2BICASAMDQBZvSQrb2omhAgKBrkPoCGEcNQICEekk30pkQzmkD6f%2BYN4EoAbeBAUiYcVnzGEAgFYDg8AEbjJftRNDXCx%2BAA9sp37UTQgQFA1yH0BDACyMoHy%2F%2FJ0AGBAQj0Cm%2BhMYAIBIBARABmtznaiaEAga5Drhf%2FAABmvHfaiaEAQa5DrhY%2FAAG7SB%2FoA1NQi%2BQAFyMoHFcv%2FydB3dIAYyMsFywIizxZQBfoCFMtrEszMyXP7AMhAFIEBCPRR8qcCAHCBAQjXGPoA0z%2FIVCBHgQEI9FHyp4IQbm90ZXB0gBjIywXLAlAGzxZQBPoCE8tqEszMyXP7AMhAFIEBCPRR8qcCAHCBAQjXGPoA0z%2FIVCBHgQEI9FHyp4IQZHN0cnB0gBjIywXLAlAFzxZQA%2FoCE8tqyx8Syz%2FJc%2FsAAAr0AMntVA%3D%3D"}',
            "device": '{"platform":"android","appName":"Tonkeeper","appVersion":"5.0.18","maxProtocolVersion":2,"features":["SendTransaction",{"name":"SendTransaction","maxMessages":4}]}',
            "transaction": "1",
            "id": req_id,
            "show_sender": SHOW_SENDER,
            "method": "getBuyStarsLink"
        }
        logger.debug(f"Payload –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É: {payload_link}")
        try:
            response_link = requests.post(url, headers=headers, data=payload_link)
            response_link.raise_for_status()
            logger.debug(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É): {response_link.text}")
            if not response_link.text:
                error_msg = "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Fragment –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É."
                logger.error(error_msg)
                return None, None, quantity, error_msg
            try:
                text_link = response_link.json()
            except json.JSONDecodeError as e:
                error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON: {e}. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_link.text}"
                logger.error(error_msg)
                return None, None, quantity, error_msg
            logger.debug(f"JSON –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É: {text_link}")
        except requests.RequestException as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É Stars: {e}"
            logger.error(error_msg)
            return None, None, quantity, error_msg
        if text_link.get('ok') is True:
            transaction_messages = text_link.get('transaction', {}).get('messages', [])
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_messages}")
            if not transaction_messages:
                error_msg = f"–°–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {text_link}"
                logger.error(error_msg)
                return None, None, quantity, error_msg
            payload_transaction = transaction_messages[0].get('payload')
            logger.debug(f"Payload —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {payload_transaction}")
            if not payload_transaction:
                error_msg = f"Payload —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {text_link}"
                logger.error(error_msg)
                return None, None, quantity, error_msg
            try:
                decoded_payload = decoder(payload_transaction)
                ref_id = decoder2(data=decoded_payload)
                COMMENT = f"{quantity} Telegram Stars \n\nRef#{ref_id}"
                logger.debug(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {COMMENT}")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ payload —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}"
                logger.error(error_msg)
                return None, None, quantity, error_msg
        else:
            error_detail = text_link.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É Stars.')
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É Stars: {error_detail}"
            logger.error(error_msg)
            return None, None, quantity, error_msg
        try:
            tx_hash, ref_id, error_transaction = await send_ton_transaction(AMOUNT, COMMENT)
            if error_transaction:
                return None, None, quantity, error_transaction
            if not tx_hash or not ref_id:
                error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏."
                logger.error(error_msg)
                return None, None, quantity, error_msg
        except Exception as e:
            error_msg = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}"
            logger.error(error_msg)
            return None, None, quantity, error_msg
        return tx_hash, ref_id, quantity, None


orders_info: Dict[int, List[Dict[str, str | int | bool | None]]] = {}


class PaymentProcessor:
    def __init__(self):
        self.loop = asyncio.new_event_loop()
        self.thread = threading.Thread(target=self.run_loop, daemon=True)
        self.thread.start()
        logger.debug("–ü–æ—Ç–æ–∫ PaymentProcessor –∑–∞–ø—É—â–µ–Ω.")
        self.task_queue = asyncio.Queue()
        asyncio.run_coroutine_threadsafe(self.queue_worker(), self.loop)

    def run_loop(self):
        asyncio.set_event_loop(self.loop)
        logger.debug("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª PaymentProcessor –∑–∞–ø—É—â–µ–Ω.")
        self.loop.run_forever()

    def enqueue_payment(self, c: Cardinal, buyer_chat_id: int, username: str, stars_quantity: int, orderID: str):
        task = (c, buyer_chat_id, username, stars_quantity, orderID)
        position_in_queue = self.task_queue.qsize() + 1
        asyncio.run_coroutine_threadsafe(self.task_queue.put(task), self.loop)
        return position_in_queue

    async def queue_worker(self):
        while True:
            task = await self.task_queue.get()
            try:
                c, buyer_chat_id, username, stars_quantity, orderID = task
                await self.process_payment(c, buyer_chat_id, username, stars_quantity, orderID)
            except Exception as e:
                logger.error(f"[queue_worker] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏: {e}")
            finally:
                self.task_queue.task_done()

    async def process_payment(self, c: Cardinal, buyer_chat_id: int, username: str, stars_quantity: int, orderID: str):


        retry_count = 0
        max_retries = 3

        while retry_count < max_retries:
            try:
                tx_hash, ref_id, quantity, error = await main_async(username, stars_quantity)
                if error:
                    if '406' in error and 'External message was not accepted' in error:
                        retry_count += 1
                        if retry_count < max_retries:
                            logger.warning(
                                f"–ü–æ–ø—ã—Ç–∫–∞ {retry_count}: –û—à–∏–±–∫–∞ 406 'External message was not accepted', –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.")
                            await asyncio.sleep(5)
                            continue
                        else:
                            logger.error(
                                f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ ({max_retries}) –¥–ª—è –∑–∞–∫–∞–∑–∞ {orderID} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ 406.")
                            update_stats(False, stars_quantity)
                            c.send_message(buyer_chat_id, sanitize_telegram_text(
                                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."))
                            if config["AUTO_REFUND"]:
                                c.account.refund(orderID)
                                c.telegram.bot.send_message(USER_ID, sanitize_telegram_text(
                                    f'–í–µ—Ä–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {username} –¥–µ–Ω—å–≥–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {error}'))
                            else:
                                send_error_with_inline_url(c, USER_ID, orderID, error)
                            return
                    elif 'No Telegram users found' in error:
                        logger.info(f"Username {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {buyer_chat_id}")
                        user_orders = orders_info.get(buyer_chat_id, [])
                        for o in user_orders:
                            if o['orderID'] == orderID and not o.get('completed', False):
                                o['username'] = None
                                o['confirmed'] = False
                                break
                        c.send_message(buyer_chat_id, sanitize_telegram_text(
                            "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ username –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Stars."))
                        return
                    elif '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON' in error:
                        logger.error(f"–ü–ª–∞—Ç—ë–∂ –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è {username}: {error}")
                        user_orders = orders_info.get(buyer_chat_id, [])
                        current_order = next(
                            (o for o in user_orders if o['orderID'] == orderID and not o.get('completed', False)), None)
                        if current_order:
                            if 'retry_count' not in current_order:
                                current_order['retry_count'] = 0
                            current_order['retry_count'] += 1
                            if current_order['retry_count'] <= 3:
                                await asyncio.sleep(5)
                                await self.process_payment(c, buyer_chat_id, username, stars_quantity, orderID)
                                return
                            else:
                                logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è –∑–∞–∫–∞–∑–∞ {orderID}")
                        else:
                            logger.error(f"–ó–∞–∫–∞–∑ {orderID} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ orders_info –¥–ª—è buyer_chat_id {buyer_chat_id}")
                        c.send_message(buyer_chat_id, sanitize_telegram_text(
                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."))
                        return
                    elif '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ' in error:
                        if config["AUTO_REFUND"]:
                            c.send_message(buyer_chat_id, sanitize_telegram_text(
                                "‚ùå –ù–∞ –∫–æ—à–µ–ª—å–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞—é –í–∞–º –¥–µ–Ω—å–≥–∏ –∏ –ø—Ä–∏–Ω–æ—à—É –∏–∑–≤–∏–Ω–µ–Ω–∏—è."))
                            c.account.refund(orderID)
                            c.telegram.bot.send_message(USER_ID, sanitize_telegram_text(
                                f'–í–µ—Ä–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {username} –¥–µ–Ω—å–≥–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {error}'))
                            c.update_lots_and_categories()
                            subcategory = c.account.get_subcategory(FunPayAPI.types.SubCategoryTypes.COMMON,
                                                                    SUBCATEGORY_ID)
                            my_lots = c.tg_profile.get_sorted_lots(2).get(subcategory, {})
                            for lot_id, lot in my_lots.items():
                                fields = c.account.get_lot_fields(lot_id)
                                if fields:
                                    fields.active = False
                                    c.account.save_lot(fields)
                                    logger.debug(f"–õ–æ—Ç {lot_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤.")
                                    message = f"‚ùå –õ–æ—Ç {lot_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ:\n"
                                    c.telegram.bot.send_message(USER_ID, sanitize_telegram_text(message))
                        else:
                            c.send_message(buyer_chat_id, sanitize_telegram_text(
                                "‚ùå –ù–∞ –∫–æ—à–µ–ª—å–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤."))
                            send_error_with_inline_url(c, USER_ID, orderID, error)
                            c.update_lots_and_categories()
                            subcategory = c.account.get_subcategory(FunPayAPI.types.SubCategoryTypes.COMMON,
                                                                    SUBCATEGORY_ID)
                            my_lots = c.tg_profile.get_sorted_lots(2).get(subcategory, {})
                            for lot_id, lot in my_lots.items():
                                fields = c.account.get_lot_fields(lot_id)
                                if fields:
                                    fields.active = False
                                    c.account.save_lot(fields)
                                    logger.debug(f"–õ–æ—Ç {lot_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤.")
                                    message = f"‚ùå –õ–æ—Ç {lot_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ:\n"
                                    c.telegram.bot.send_message(USER_ID, sanitize_telegram_text(message))
                        return
                    else:
                        update_stats(False, stars_quantity)
                        c.send_message(buyer_chat_id,
                                       sanitize_telegram_text("‚ùå –í–∞—à –∑–∞–∫–∞–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"))
                        if config["AUTO_REFUND"]:
                            c.account.refund(orderID)
                            c.telegram.bot.send_message(USER_ID, sanitize_telegram_text(
                                f'–í–µ—Ä–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {username} –¥–µ–Ω—å–≥–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {error}'))
                        else:
                            send_error_with_inline_url(c, USER_ID, orderID, error)
                        return

                found_success = False
                check_error = None
                for attempt in range(25):
                    try:
                        with httpx.Client() as client:
                            rq = client.get(
                                f'https://preview.toncenter.com/api/v3/traces?msg_hash={tx_hash}&include_actions=true')
                        response_data = rq.json()

                        for trace in response_data.get('traces', []):
                            for action in trace.get('actions', []):
                                success = action.get('success', False)
                                if success:
                                    logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ö–µ—à–µ–º {action['trace_external_hash']} —É—Å–ø–µ—à–Ω–∞.")
                                    found_success = True
                                    break
                            if found_success:
                                break

                        if found_success:
                            break
                        else:
                            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω–∞.")
                            await asyncio.sleep(5)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                        check_error = str(e)
                        await asyncio.sleep(5)

                if not found_success:
                    check_error = check_error or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ 15 –ø–æ–ø—ã—Ç–æ–∫."
                    logger.error(check_error)
                    update_stats(False, stars_quantity)
                    if config["AUTO_REFUND"]:
                        if '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ TonViewer (404)' in check_error or '—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' in check_error.lower():
                            c.send_message(buyer_chat_id, sanitize_telegram_text(
                                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (404). –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞–º –¥–µ–Ω—å–≥–∏. –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!"))
                        else:
                            c.send_message(buyer_chat_id, sanitize_telegram_text(
                                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞–º –¥–µ–Ω—å–≥–∏. –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!"))
                        c.account.refund(orderID)
                        if '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ' in check_error:
                            c.update_lots_and_categories()
                            subcategory = c.account.get_subcategory(FunPayAPI.types.SubCategoryTypes.COMMON,
                                                                    SUBCATEGORY_ID)
                            my_lots = c.tg_profile.get_sorted_lots(2).get(subcategory, {})
                            for lot_id, lot in my_lots.items():
                                fields = c.account.get_lot_fields(lot_id)
                                if fields:
                                    fields.active = False
                                    c.account.save_lot(fields)
                                    logger.debug(f"–õ–æ—Ç {lot_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤.")
                                    message = f"‚ùå –õ–æ—Ç {lot_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ:\n"
                                    c.telegram.bot.send_message(USER_ID, sanitize_telegram_text(message))
                        elif 'No Telegram users found' in check_error:
                            c.telegram.bot.send_message(USER_ID, sanitize_telegram_text(
                                f'–í–µ—Ä–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {username} –¥–µ–Ω—å–≥–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {check_error}'))
                        else:
                            c.telegram.bot.send_message(USER_ID, sanitize_telegram_text(
                                f'–í–µ—Ä–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {username} –¥–µ–Ω—å–≥–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {check_error}'))
                    else:
                        c.send_message(buyer_chat_id, sanitize_telegram_text(
                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤."))
                        c.telegram.bot.send_message(USER_ID, sanitize_telegram_text(
                            f"–£ –≤–∞—Å –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: https://funpay.com/orders/{orderID}/\n–û—à–∏–±–∫–∞: {check_error}\n–ü—Ä–æ—Å—å–±–∞ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞"))
                    return

                logger.info(f"–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–µ–Ω –¥–ª—è {username}: TX Hash: {tx_hash}, Ref ID: {ref_id}, Qty: {quantity}")
                update_stats(True, stars_quantity)
                c.send_message(
                    buyer_chat_id,
                    sanitize_telegram_text(f"""
üåü –£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞!
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {username}
‚≠êÔ∏è Stars: {quantity}
üîë Ref ID: Ref#{ref_id}
‚úÖ –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤–æ

üîó –î–æ–ø –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {tx_hash}


üìù –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ ‚Äî —ç—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç! üòé
                    """)
                )
                c.telegram.bot.send_message(
                    USER_ID,
                    sanitize_telegram_text(f"""
üåü –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
üîó –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: https://preview.toncenter.com/api/v3/traces?msg_hash={tx_hash}&include_actions=true
üîó –î–æ–ø –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: https://tonviewer.com/transaction/{tx_hash}
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {username}
‚≠êÔ∏è Stars: {quantity}
üîë Ref ID: Ref#{ref_id}
‚úÖ –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤–æ

üìù –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏, –±—É–¥—É —Ä–∞–¥! üòá
                    """),
                    parse_mode="HTML"
                )
                orders = orders_info.get(buyer_chat_id, [])
                for order in orders:
                    if order['orderID'] == orderID and not order.get('completed', False):
                        order['completed'] = True
                        break

                return

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è {username}: {e}")
                try:
                    c.send_message(buyer_chat_id,
                                   sanitize_telegram_text(f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {str(e)}."))
                except Exception as send_error:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {buyer_chat_id}: {send_error}")
                break

        logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ ({max_retries}) –¥–ª—è –∑–∞–∫–∞–∑–∞ {orderID}.")
        update_stats(False, stars_quantity)
        c.send_message(buyer_chat_id, sanitize_telegram_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."))
        if config["AUTO_REFUND"]:
            c.account.refund(orderID)
            c.telegram.bot.send_message(USER_ID, sanitize_telegram_text(
                f'–í–µ—Ä–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {username} –¥–µ–Ω—å–≥–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫'))
        else:
            send_error_with_inline_url(c, USER_ID, orderID, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")


payment_processor = PaymentProcessor()


class PluginFilter(Filter):
    def filter(self, record):
        return record.name == "FPC.autostars"


file_handler = logging.FileHandler("auto.log")
file_handler.setLevel(logging.DEBUG)
file_handler.addFilter(PluginFilter())
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)
stream_handler = logging.StreamHandler()
stream_handler.setLevel(logging.DEBUG)
stream_handler.setFormatter(formatter)
logger.addHandler(stream_handler)

LOGGER_PREFIX = "[AUTO autostars]"
UPDATE = """
- –û–±—Ä–∞–±–æ—Ç–∫–∞ 406 –æ—à–∏–±–∫–∏
- –ù–µ –ø—Ä–æ—Å–∏—Ç @username, –ø—Ä–∏ –æ—à–∏–±–∫–µ json –ø–µ—Ä–µ–¥–∞—á–∏

"""

NAME = "AutoStars"
VERSION = "4.3"
DESCRIPTION = "–ü–ª–∞–≥–∏–Ω –¥–ª—è –∞–≤—Ç–æ-–Ω–∞–∫—Ä—É—Ç–∫–∏ Stars —á–µ—Ä–µ–∑ Fragment."
CREDITS = "@exfador"
UUID = "bceecb15-4244-4f4d-8a03-b500c8f3a701"
SETTINGS_PAGE = False

RUNNING = True
chat_id = None


def handle_new_order_stars(c: Cardinal, e: NewOrderEvent, *args):
    global RUNNING, chat_id, orders_info
    if not RUNNING:
        return
    OrderID = e.order.id
    buyer_chat_id_e = e.order.buyer_id

    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ #{OrderID}")
    logger.debug(f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {e.order.buyer_username} (ID: {e.order.buyer_id})")
    logger.debug(f"–û–ø–∏—Å–∞–Ω–∏–µ: {e.order.description}")
    logger.debug(f"–°—É–º–º–∞: {e.order.price} {e.order.currency}")
    logger.debug(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {e.order.amount}")

    username_from_order = None
    need_to_ask_username = True

    try:
        order_details = c.account.get_order(OrderID)
        if order_details:
            logger.debug(f"–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ #{OrderID}:")
            logger.debug(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order_details.status}")

            logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ—Ç–∞:")
            for param_name, param_value in order_details.lot_params:
                logger.debug(f"  - {param_name}: {param_value}")

            logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:")
            for param_name, param_value in order_details.buyer_params.items():
                logger.debug(f"  - {param_name}: {param_value}")

                if param_name == "Telegram Username" and param_value:
                    logger.debug(f"–ù–∞–π–¥–µ–Ω Telegram Username –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: {param_value}")

                    username_value = param_value.strip()

                    t_me_match = re.search(r't\.me/(\w+)', username_value.lower())
                    if t_me_match:
                        extracted_username = t_me_match.group(1)
                        logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω username –∏–∑ —Å—Å—ã–ª–∫–∏ t.me: {extracted_username}")
                        username_value = extracted_username
                        has_links = False
                    else:
                        has_links = any(link in username_value.lower() for link in ["http://", "https://", "t.me/"])

                    if not has_links and username_value:
                        if not username_value.startswith('@'):
                            username_value = '@' + username_value

                        username_from_order = username_value
                        need_to_ask_username = False
                        logger.debug(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Telegram Username: {username_from_order}")

            if order_details.character_name:
                logger.debug(f"–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {order_details.character_name}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞: {e}")

    match = re.search(r'(\d+)\s*–∑–≤—ë–∑–¥?', e.order.description, re.IGNORECASE)
    if match:
        stars_count = int(match.group(1))
        if e.order.amount >= 1:
            total_stars = stars_count * e.order.amount
            c.send_message(
                buyer_chat_id_e,
                sanitize_telegram_text(f"–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {e.order.amount} –ª–æ—Ç–æ–≤, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars: {total_stars}.")
            )
            ntfc_new_order = (
                "üí∞ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:</b> <code>{}</code>\n\n"
                "<b><i>üôç‚Äç‚ôÇÔ∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</i></b>  <code>{}</code>\n"
                "<b><i>üíµ –°—É–º–º–∞:</i></b>  <code>{}</code>\n"
                "<b><i>üìá ID:</i></b> <code>#{}</code>\n\n"
                "<i>{}</i>"
            )
            delivery_info = f"–ê–≤—Ç–æ–≤—ã–¥–∞—á–∞ {total_stars} Stars –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞."
            notification_text = ntfc_new_order.format(
                e.order.description,
                e.order.buyer_username,
                f"{e.order.price} {e.order.currency}",
                e.order.id,
                delivery_info
            )
            try:
                buyer_chat = c.account.get_chat_by_name(e.order.buyer_username, True)
                if buyer_chat is None:
                    raise AttributeError
                buyer_chat_id = buyer_chat.id
            except AttributeError:
                return

            if buyer_chat_id not in orders_info:
                orders_info[buyer_chat_id] = []

            order_info = {
                "username": username_from_order,
                "confirmed": False,
                "auto_username": not need_to_ask_username,
                "completed": False,
                "orderID": OrderID,
                "stars_count": total_stars
            }

            orders_info[buyer_chat_id].append(order_info)

            if not need_to_ask_username:
                fragment_found_name = None
                fragment_id = None
                try:
                    search_payload = {
                        "query": username_from_order.replace("@", ""),
                        "quantity": 50,
                        "method": "searchStarsRecipient"
                    }
                    response_search = requests.post(url, headers=headers, data=search_payload)
                    response_search.raise_for_status()
                    data_search = response_search.json()
                    if data_search.get('ok'):
                        fragment_found_name = data_search.get('found', {}).get('name')
                        fragment_id = data_search.get('found', {}).get('recipient')
                except Exception as err:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ username: {err}")

                order_info['fragment_found_name'] = fragment_found_name
                order_info['fragment_id'] = fragment_id

                blurred_name = ''
                if fragment_found_name:
                    for i in range(len(fragment_found_name)):
                        blurred_name += fragment_found_name[i] if i % 2 == 0 else '*'
                else:
                    blurred_name = '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'

                fragment_display = fragment_id if fragment_id else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                additional_info = f"\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ): {blurred_name}\nFragment ID: {fragment_display}"

                c.send_message(
                    buyer_chat_id,
                    sanitize_telegram_text(
                        f"‚ú® –ó–ê–ö–ê–ó –ù–ê {total_stars} STARS –ü–†–ò–ù–Ø–¢! ‚ú®\n"
                        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"üë§ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–∏–∫–Ω–µ–π–º: {username_from_order}\n"
                        f"üìù –î–∞–Ω–Ω—ã–µ Fragment: {additional_info}\n\n"
                        f"üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò:\n"
                        f"‚úÖ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '–î–∞'\n"
                        f"‚ùå –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: '–ù–µ—Ç'\n"
                        f"üîÑ –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: '!–±—ç–∫'\n\n"
                        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    )
                )
                logger.info(
                    f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω username: {username_from_order}, Fragment Name: {blurred_name}, Fragment ID: {fragment_display}"
                )
            else:
                c.send_message(
                    buyer_chat_id,
                    sanitize_telegram_text(
                        f"‚≠êÔ∏è –ó–ê–ö–ê–ó –ù–ê {total_stars} STARS –ü–†–ò–ù–Ø–¢! ‚≠êÔ∏è\n"
                        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"‚ùóÔ∏è –ù–ï–û–ë–•–û–î–ò–ú–û –£–ö–ê–ó–ê–¢–¨ –í–ê–® –ù–ò–ö–ù–ï–ô–ú\n\n"
                        f"üëâ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à @username –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Stars\n"
                        f"üëâ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n\n"
                        f"‚ö†Ô∏è –ë–µ–∑ @username –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!\n\n"
                        f"‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: '!–±—ç–∫'\n"
                        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    )
                )
        else:
            c.send_message(
                buyer_chat_id_e,
                sanitize_telegram_text(f"–ó–∞–∫–∞–∑ –Ω–∞ {stars_count} Stars")
            )


def handle_new_message_text(c: Cardinal, e: NewMessageEvent, *args):
    global RUNNING, chat_id, orders_info
    if not RUNNING:
        return
    buyer_chat_id = e.message.chat_id
    my_user = c.account.username
    my_id = c.account.id

    if buyer_chat_id == my_id:
        return
    if e.message.text.strip().lower().startswith("!status"):
        handle_status_command(c, e)
        return
    if e.message.author.lower() in ["funpay", my_user.lower()]:
        return
    if buyer_chat_id not in orders_info or not orders_info[buyer_chat_id]:
        return
    current_order = next((o for o in reversed(orders_info[buyer_chat_id]) if not o.get('completed', False)), None)
    if current_order is None:
        return

    if e.message.text.strip().lower().startswith("!–±—ç–∫"):
        if current_order.get('completed', False) or current_order.get('is_canceled', False) or current_order.get(
                'answered', False):
            return
        c.account.refund(current_order['orderID'])
        current_order['is_canceled'] = True
        c.send_message(
            buyer_chat_id,
            sanitize_telegram_text(
                "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑. –î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∑–∞–Ω–æ–≤–æ.")
        )
        return

    if current_order.get('is_canceled', False):
        return

    if current_order.get('username') is not None and current_order.get('auto_username',
                                                                       False) and not current_order.get('confirmed',
                                                                                                        False):
        user_response = e.message.text.strip().lower()

        if user_response in ['–¥–∞', '+', 'yes', 'y', '–¥']:
            current_order['confirmed'] = True
            current_order['answered'] = True
            orderID = current_order['orderID']
            stars_quantity = current_order.get('stars_count', 50)
            username = current_order['username']

            position = payment_processor.enqueue_payment(
                c, buyer_chat_id, username, stars_quantity, orderID
            )


        elif user_response in ['–Ω–µ—Ç', '-', 'no', 'n', '–Ω']:
            current_order['answered'] = True
            current_order['auto_username'] = False
            current_order['username'] = None

            c.send_message(
                buyer_chat_id,
                sanitize_telegram_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π @username.")
            )

        return

    if current_order['username'] is None:
        if not re.match(r'^@\w+$', e.message.text.strip()):
            c.send_message(
                e.message.chat_id,
                sanitize_telegram_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ @username.")
            )
            return
        username = e.message.text.strip()
        current_order['username'] = username
        current_order['confirmed'] = False
        fragment_found_name = None
        fragment_id = None
        try:
            search_payload = {
                "query": username.replace("@", ""),
                "quantity": 50,
                "method": "searchStarsRecipient"
            }
            response_search = requests.post(url, headers=headers, data=search_payload)
            response_search.raise_for_status()
            data_search = response_search.json()
            if data_search.get('ok'):
                fragment_found_name = data_search.get('found', {}).get('name')
                fragment_id = data_search.get('found', {}).get('recipient')
        except:
            pass
        current_order['fragment_found_name'] = fragment_found_name
        current_order['fragment_id'] = fragment_id

        blurred_name = ''
        if fragment_found_name:
            for i in range(len(fragment_found_name)):
                blurred_name += fragment_found_name[i] if i % 2 == 0 else '*'
        else:
            blurred_name = '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'

        fragment_display = fragment_id if fragment_id else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
        additional_info = f"\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ): {blurred_name}\nFragment ID: {fragment_display}"
        c.send_message(
            e.message.chat_id,
            sanitize_telegram_text(
                f"ü§ñ –í–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Telegram: {username} | {additional_info} \n"
                "–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–µ—Ä–Ω–∞, –≤–≤–µ–¥–∏—Ç–µ '+' –∏–ª–∏ '–î–∞'. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º, –Ω–∞–ø–∏—à–∏—Ç–µ '-' –∏–ª–∏ '–ù–µ—Ç'. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –≤–≤–µ–¥–∏—Ç–µ '!–±—ç–∫'.\n\n–ü–æ—á–µ–º—É –Ω–∏–∫ –≤ –±–ª—é—Ä–µ? –ß—Ç–æ–±—ã –ø–ª–æ—â–∞–¥–∫–∞ FunPay –Ω–µ –≤—ã–¥–∞–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–∑-–∑–∞ –≤–∞—à–µ–≥–æ name"
            )
        )
        logger.info(
            f"–ù–∞–π–¥–µ–Ω username: {username}, Fragment Name: {blurred_name}, Fragment ID: {fragment_display}"
        )
        return

    if current_order['username'] is not None and not current_order['confirmed']:
        user_response = e.message.text.strip().lower()
        if user_response in ['–¥–∞', '+', 'yes', 'y', '–¥']:
            current_order['confirmed'] = True
            current_order['answered'] = True
            orderID = current_order['orderID']
            stars_quantity = current_order.get('stars_count', 50)
            position = payment_processor.enqueue_payment(
                c, buyer_chat_id, current_order['username'], stars_quantity, orderID
            )

        elif user_response in ['–Ω–µ—Ç', '-', 'no', 'n', '–Ω']:
            current_order['answered'] = True
            current_order['username'] = None
            c.send_message(
                e.message.chat_id,
                sanitize_telegram_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ @username –µ—â—ë —Ä–∞–∑.")
            )
        else:
            c.send_message(
                e.message.chat_id,
                sanitize_telegram_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '+', '–î–∞', '-' –∏–ª–∏ '–ù–µ—Ç'.")
            )


def stars_auto(c: Cardinal, e, *args):
    if isinstance(e, NewOrderEvent):
        handle_new_order_stars(c, e, *args)
    elif isinstance(e, NewMessageEvent):
        handle_new_message_text(c, e, *args)


def activate_lots(c: Cardinal, chat_id: int):
    json_path = 'storage/cache/auto_stars_id.json'
    if not os.path.exists(json_path):
        logger.error(f"–§–∞–π–ª {json_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        c.send_message(chat_id, sanitize_telegram_text(f"‚ùå –§–∞–π–ª {json_path} –Ω–µ –Ω–∞–π–¥–µ–Ω."))
        return
    try:
        with open(json_path, 'r', encoding='utf-8') as file:
            lot_ids: List[int] = json.load(file)
        logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ ID –ª–æ—Ç–æ–≤: {lot_ids}")
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ —Ñ–∞–π–ª–∞ {json_path}: {e}")
        c.send_message(chat_id, sanitize_telegram_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}"))
        return
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {json_path}: {e}")
        c.send_message(chat_id, sanitize_telegram_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}"))
        return
    if not isinstance(lot_ids, list):
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ {json_path}. –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ ID.")
        c.send_message(chat_id, sanitize_telegram_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON."))
        return
    activated_lots = []
    already_active = []
    not_found = []
    invalid_ids = []
    errors = []
    rate_limited = False

    for lot_id in lot_ids:
        if rate_limited:
            break

        if not isinstance(lot_id, int):
            invalid_ids.append(lot_id)
            continue
        try:
            fields = c.account.get_lot_fields(lot_id)
            if fields is None:
                not_found.append(lot_id)
                continue
            if fields.active:
                already_active.append(lot_id)
                continue
            fields.active = True
            c.account.save_lot(fields)
            activated_lots.append(lot_id)
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)
        except FunPayAPI.common.exceptions.RequestFailedError as e:
            if '429' in str(e):
                logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ FunPay API (429) –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–æ—Ç–∞ {lot_id}")
                errors.append((lot_id, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (429)"))
                rate_limited = True
            else:
                errors.append((lot_id, str(e)))
        except Exception as e:
            errors.append((lot_id, str(e)))

    report = "‚úÖ **–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ª–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.**\n\n"
    if activated_lots:
        report += f"**–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã**: {', '.join(map(str, activated_lots))}\n"
    if already_active:
        report += f"**–£–∂–µ –∞–∫—Ç–∏–≤–Ω—ã**: {', '.join(map(str, already_active))}\n"
    if not_found:
        report += f"**–ù–µ –Ω–∞–π–¥–µ–Ω—ã**: {', '.join(map(str, not_found))}\n"
    if invalid_ids:
        report += f"**–ù–µ–≤–µ—Ä–Ω—ã–µ ID**: {', '.join(map(str, invalid_ids))}\n"
    if errors:
        error_details = "; ".join([f"{lot_id}: {err}" for lot_id, err in errors])
        report += f"**–û—à–∏–±–∫–∏**: {error_details}\n"
    if rate_limited:
        report += "\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ**: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ FunPay. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."

    c.telegram.bot.send_message(chat_id, sanitize_telegram_text(report))


def deactivate_lots(c: Cardinal, chat_id: int):
    c.update_lots_and_categories()
    try:
        subcategory = c.account.get_subcategory(FunPayAPI.types.SubCategoryTypes.COMMON, SUBCATEGORY_ID)
        my_lots = c.tg_profile.get_sorted_lots(2).get(subcategory, {})
    except Exception as e:
        c.send_message(chat_id, sanitize_telegram_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–æ–≤: {e}"))
        return
    if not my_lots:
        c.send_message(chat_id, sanitize_telegram_text("‚ÑπÔ∏è –ù–µ—Ç –ª–æ—Ç–æ–≤ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏."))
        return
    deactivated_lots = []
    already_inactive = []
    errors = []
    not_found = []
    rate_limited = False

    for lot_id, lot in my_lots.items():
        if rate_limited:
            break

        if not isinstance(lot_id, int):
            continue
        try:
            fields = c.account.get_lot_fields(lot_id)
            if fields is None:
                not_found.append(lot_id)
                continue
            if not fields.active:
                already_inactive.append(lot_id)
                continue
            fields.active = False
            c.account.save_lot(fields)
            deactivated_lots.append(lot_id)
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(2)
        except FunPayAPI.common.exceptions.RequestFailedError as e:
            if '429' in str(e):
                logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ FunPay API (429) –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–æ—Ç–∞ {lot_id}")
                errors.append((lot_id, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (429)"))
                rate_limited = True
            else:
                errors.append((lot_id, str(e)))
        except Exception as e:
            errors.append((lot_id, str(e)))

    report = "‚úÖ **–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ª–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.**\n\n"
    if deactivated_lots:
        report += f"**–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã**: {', '.join(map(str, deactivated_lots))}\n"
    if already_inactive:
        report += f"**–£–∂–µ –±—ã–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã**: {', '.join(map(str, already_inactive))}\n"
    if not_found:
        report += f"**–ù–µ –Ω–∞–π–¥–µ–Ω—ã**: {', '.join(map(str, not_found))}\n"
    if errors:
        error_details = "; ".join([f"{lot_id}: {err}" for lot_id, err in errors])
        report += f"**–û—à–∏–±–∫–∏**: {error_details}\n"
    if rate_limited:
        report += "\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ**: –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ FunPay. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."

    c.telegram.bot.send_message(USER_ID, sanitize_telegram_text(report))


def stars(m: types.Message, c: Cardinal):
    global RUNNING
    if RUNNING:
        c.telegram.bot.send_message(
            m.chat.id,
            sanitize_telegram_text("üö® –ê–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∞ TG STARS —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞.")
        )
        return
    RUNNING = True
    future = asyncio.run_coroutine_threadsafe(check_wallet_balance(), payment_processor.loop)
    try:
        balance_ton = future.result(timeout=10)
    except Exception as e:
        c.telegram.bot.send_message(m.chat.id, sanitize_telegram_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞."))
        RUNNING = False
        return
    c.telegram.bot.send_message(
        m.chat.id,
        sanitize_telegram_text(f"üöÄ –ê–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∞ TG STARS –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {balance_ton} TON.")
    )


def off_stars(m: types.Message, c: Cardinal):
    global RUNNING
    if not RUNNING:
        c.telegram.bot.send_message(
            m.chat.id,
            sanitize_telegram_text("üõë –ê–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∞ TG STARS —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞!")
        )
        return
    RUNNING = False
    c.telegram.bot.send_message(
        m.chat.id,
        sanitize_telegram_text("üõë –ê–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∞ TG STARS –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    )


async def get_wallet_balance():
    try:
        balance_nano = await check_wallet_balance()
        if config["USE_OLD_BALANCE"]:
            return f"{balance_nano} (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)"
        else:
            balance_ton = balance_nano / 1_000_000_000
            return f"{balance_ton:.2f} TON"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def stars_config(c: Cardinal, m: types.Message):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è /stars_config —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    try:
        c.update_lots_and_categories()
        subcategory = c.account.get_subcategory(FunPayAPI.types.SubCategoryTypes.COMMON, SUBCATEGORY_ID)
        my_lots = c.tg_profile.get_sorted_lots(2).get(subcategory, {})

        active_lots = []
        try:
            for lot_id, lot in my_lots.items():
                try:
                    lot_fields = c.account.get_lot_fields(lot_id)
                    if lot_fields and lot_fields.active:
                        active_lots.append(lot_id)
                except FunPayAPI.common.exceptions.RequestFailedError as lot_err:
                    if '429' in str(lot_err):
                        logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ FunPay API (429) –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ—Ç–∞ {lot_id}")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–∞ {lot_id}: {lot_err}")
        except Exception as lots_err:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ—Ç–æ–≤: {lots_err}")

        balance_future = asyncio.run_coroutine_threadsafe(get_wallet_balance(), payment_processor.loop)
        balance_text = balance_future.result(timeout=10)

        activation_status = "üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"

        keyboard = InlineKeyboardMarkup(row_width=2)
        status_btn = InlineKeyboardButton(
            text=f"{'üü¢ –í–∫–ª' if RUNNING else 'üî¥ –í—ã–∫–ª'}",
            callback_data="toggle_autosale"
        )
        lots_btn = InlineKeyboardButton(
            text=f"{'‚ö°Ô∏è –õ–æ—Ç—ã: –í–∫–ª' if active_lots else 'üí§ –õ–æ—Ç—ã: –í—ã–∫–ª'}",
            callback_data="toggle_lots"
        )
        logs_btn = InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data="send_logs")
        settings_btn = InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="open_settings")
        stats_btn = InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="daily_stats")
        keyboard.add(status_btn, lots_btn)
        keyboard.add(logs_btn, settings_btn)
        keyboard.add(stats_btn)

        status_text = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if RUNNING else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        lots_text = f"‚ö°Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_lots)}" if active_lots else "üí§ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö"
        message_text = (
            "‚ú® <b>AutoStars: –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b> ‚ú®\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"<b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è:</b> {activation_status}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
            f"<b>–õ–æ—Ç—ã:</b> {lots_text}\n"
            f"<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {balance_text}\n\n"

            "üí° <b>–ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞?</b>\n"
            "–ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2.35e-10 TON), –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –±–∞–ª–∞–Ω—Å–∞:\n"
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üí∞ –ë–∞–ª–∞–Ω—Å ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ '–°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç'.\n"
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ seed-—Ñ—Ä–∞–∑—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
        )

        c.telegram.bot.send_message(
            chat_id=m.chat.id,
            text=message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        error_message = str(e)
        # –û—á–∏—Å—Ç–∫–∞ HTML-—Ç–µ–≥–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        error_message = sanitize_telegram_text(error_message)
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(error_message) > 200:
            error_message = error_message[:197] + "..."

        c.telegram.bot.send_message(
            m.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–∏: {error_message}"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stars_config: {e}")


def update_config_panel(c: Cardinal, chat_id: int, message_id: int):
    try:
        c.update_lots_and_categories()
        subcategory = c.account.get_subcategory(FunPayAPI.types.SubCategoryTypes.COMMON, SUBCATEGORY_ID)
        my_lots = c.tg_profile.get_sorted_lots(2).get(subcategory, {})

        active_lots = []
        try:
            for lot_id, lot in my_lots.items():
                try:
                    lot_fields = c.account.get_lot_fields(lot_id)
                    if lot_fields and lot_fields.active:
                        active_lots.append(lot_id)
                except FunPayAPI.common.exceptions.RequestFailedError as lot_err:
                    if '429' in str(lot_err):
                        logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ FunPay API (429) –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ—Ç–∞ {lot_id}")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–∞ {lot_id}: {lot_err}")
        except Exception as lots_err:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ—Ç–æ–≤: {lots_err}")

        balance_future = asyncio.run_coroutine_threadsafe(get_wallet_balance(), payment_processor.loop)
        balance_text = balance_future.result(timeout=10)

        activation_status = "üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"

        keyboard = InlineKeyboardMarkup(row_width=2)
        status_btn = InlineKeyboardButton(
            text=f"{'üü¢ –í–∫–ª' if RUNNING else 'üî¥ –í—ã–∫–ª'}",
            callback_data="toggle_autosale"
        )
        lots_btn = InlineKeyboardButton(
            text=f"{'‚ö°Ô∏è –õ–æ—Ç—ã: –í–∫–ª' if active_lots else 'üí§ –õ–æ—Ç—ã: –í—ã–∫–ª'}",
            callback_data="toggle_lots"
        )
        logs_btn = InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data="send_logs")
        settings_btn = InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="open_settings")
        stats_btn = InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="daily_stats")
        keyboard.add(status_btn, lots_btn)
        keyboard.add(logs_btn, settings_btn)
        keyboard.add(stats_btn)

        status_text = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if RUNNING else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        lots_text = f"‚ö°Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_lots)}" if active_lots else "üí§ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö"
        message_text = (
            "‚ú® <b>AutoStars: –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b> ‚ú®\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"<b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è:</b> {activation_status}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
            f"<b>–õ–æ—Ç—ã:</b> {lots_text}\n"
            f"<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {balance_text}\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
        )

        c.telegram.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        error_message = str(e)
        # –û—á–∏—Å—Ç–∫–∞ HTML-—Ç–µ–≥–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        error_message = sanitize_telegram_text(error_message)
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(error_message) > 200:
            error_message = error_message[:197] + "..."

        c.telegram.bot.send_message(
            chat_id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏: {error_message}"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ update_config_panel: {e}")


def update_settings_panel(c: Cardinal, chat_id: int, message_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(text="üîë –•—ç—à", callback_data="edit_hash"),
        InlineKeyboardButton(text="üç™ –ö—É–∫–∏", callback_data="edit_cookie"),
        InlineKeyboardButton(text="üîê –ú–Ω–µ–º–æ–Ω–∏–∫–∞", callback_data="edit_mnemonic"),
        InlineKeyboardButton(text="üë§ User ID", callback_data="edit_user_id"),
        InlineKeyboardButton(
            text=f"ü§ñ –í–æ–∑–≤—Ä–∞—Ç: {'–ê–≤—Ç–æ' if config['AUTO_REFUND'] else '–†—É—á–Ω–æ–π'}",
            callback_data="toggle_refund"
        ),
        InlineKeyboardButton(
            text=f"üëª –û—Ç–ø—Ä–∞–≤–∫–∞: {'–ê–Ω–æ–Ω–∏–º–Ω–∞—è' if config['SHOW_SENDER'] == '0' else '–ù–µ –∞–Ω–æ–Ω–∏–º–Ω–∞—è'}",
            callback_data="toggle_sender"
        ),
        InlineKeyboardButton(
            text=f"üí∞ –ë–∞–ª–∞–Ω—Å: {'–°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç' if config['USE_OLD_BALANCE'] else '–ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç'}",
            callback_data="toggle_balance_format"
        ),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    message_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AutoStars</b>\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    )
    c.telegram.bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text=message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


def get_daily_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º –≤ –≤–∏–¥–µ —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
    date_str = datetime.datetime.now().strftime("%Y-%m-%d")
    day_stats = stats_data.get(date_str, {})

    if not day_stats:
        return None

    successful = day_stats.get("successful_transactions", 0)
    unsuccessful = day_stats.get("unsuccessful_transactions", 0)
    quantities = day_stats.get("quantities_sold", {})
    total_stars = sum(int(q) * count for q, count in quantities.items())

    quantities_text = "\n".join(
        [f"  - {q} Stars: {count} —à—Ç." for q, count in quantities.items()]) if quantities else "  - –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    stats_message = (
        f"‚ú® –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date_str} ‚ú®\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {successful}\n"
        f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {unsuccessful}\n"
        f"‚≠êÔ∏è –ü—Ä–æ–¥–∞–Ω–Ω—ã–µ Stars:\n{quantities_text}\n"
        f"üí´ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ: {total_stars} Stars\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    )
    return stats_message


def handle_status_command(c: Cardinal, e: NewMessageEvent):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã !status –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    text = e.message.text.strip()
    parts = text.split(" ", 1)
    if len(parts) > 1 and parts[1].strip():
        date_str = parts[1].strip()
    else:
        date_str = datetime.datetime.now().strftime("%Y-%m-%d")

    if date_str not in stats_data:
        msg = (
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date_str} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n"
            "–í–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ –±—ã–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–ª–∏ –¥–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ."
        )
        c.send_message(e.message.chat_id, msg)
        return

    image_stream = generate_order_graph(date_str)
    if image_stream is None:
        c.send_message(e.message.chat_id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —ç—Ç—É –¥–∞—Ç—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return

    c.account.send_image(
        e.message.chat_id,
        image_stream,
        chat_name=e.message.chat_name
    )


def init_commands(c: Cardinal):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞."""
    c.add_telegram_commands(UUID, [
        ("stars_config", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏ —Ç–≥ —Å—Ç–∞—Ä—Å–æ–≤", True),
    ])
    c.telegram.msg_handler(lambda m: stars_config(c, m), commands=["stars_config"])

    @c.telegram.bot.callback_query_handler(func=lambda call: call.data in [
        "toggle_autosale", "toggle_lots", "send_logs", "open_settings", "edit_hash",
        "edit_cookie", "edit_mnemonic", "toggle_refund", "back_to_main", "cancel",
        "edit_user_id", "daily_stats", "toggle_sender", "toggle_balance_format"
    ])
    def handle_config_callback(call):
        global RUNNING, SHOW_SENDER
        data = call.data
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        callback_query_id = call.id

        try:
            c.telegram.bot.answer_callback_query(callback_query_id)
        except:
            pass

        try:
            if data == "toggle_autosale":
                if RUNNING:
                    RUNNING = False
                    c.telegram.bot.send_message(
                        chat_id,
                        sanitize_telegram_text("üõë –ê–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
                    )
                else:
                    future = asyncio.run_coroutine_threadsafe(check_wallet_balance(), payment_processor.loop)
                    balance_ton = future.result(timeout=10)
                    RUNNING = True
                    c.telegram.bot.send_message(
                        chat_id,
                        sanitize_telegram_text(f"üöÄ –ê–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∞ –≤–∫–ª—é—á–µ–Ω–∞. –ë–∞–ª–∞–Ω—Å: {balance_ton} TON")
                    )
                update_config_panel(c, chat_id, message_id)

            elif data == "toggle_lots":
                subcategory = c.account.get_subcategory(FunPayAPI.types.SubCategoryTypes.COMMON, SUBCATEGORY_ID)
                my_lots = c.tg_profile.get_sorted_lots(2).get(subcategory, {})
                active_lots = [lot_id for lot_id, lot in my_lots.items() if c.account.get_lot_fields(lot_id).active]
                if active_lots:
                    deactivate_lots(c, chat_id)
                else:
                    activate_lots(c, chat_id)
                time.sleep(1)
                update_config_panel(c, chat_id, message_id)

            elif data == "send_logs":
                log_file_path = "auto.log"
                if not os.path.exists(log_file_path):
                    c.telegram.bot.send_message(
                        chat_id,
                        sanitize_telegram_text("‚ùå –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    )
                    return
                with open(log_file_path, 'rb') as log_file:
                    c.telegram.bot.send_document(
                        chat_id,
                        document=log_file,
                        caption="üìã –õ–æ–≥–∏ AutoStars"
                    )

            elif data == "open_settings":
                update_settings_panel(c, chat_id, message_id)

            elif data == "toggle_refund":
                config["AUTO_REFUND"] = not config["AUTO_REFUND"]
                with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                    json.dump(config, f, indent=4, ensure_ascii=False)
                update_settings_panel(c, chat_id, message_id)

            elif data == "toggle_sender":
                config["SHOW_SENDER"] = "1" if config["SHOW_SENDER"] == "0" else "0"
                SHOW_SENDER = config["SHOW_SENDER"]
                with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                    json.dump(config, f, indent=4, ensure_ascii=False)
                update_settings_panel(c, chat_id, message_id)

            elif data == "daily_stats":
                stats_message = get_daily_stats()
                if stats_message:
                    c.telegram.bot.send_message(
                        chat_id,
                        sanitize_telegram_text(stats_message),
                        parse_mode="HTML"
                    )
                else:
                    c.telegram.bot.send_message(
                        chat_id,
                        sanitize_telegram_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                    )

            elif data == "edit_hash":
                current_hash = config.get("fragment_api", {}).get("hash", "–ù–µ –∑–∞–¥–∞–Ω")
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
                c.telegram.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=sanitize_telegram_text(f"üîë –¢–µ–∫—É—â–∏–π —Ö—ç—à:\n{current_hash}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π:"),
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )

                def handle_new_hash(m):
                    if m.text.startswith('/'):
                        c.telegram.bot.send_message(chat_id, "‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.")
                        update_settings_panel(c, chat_id, message_id)
                        c.telegram.bot.remove_message_handler(handle_new_hash)
                        return
                    if m.text.lower() == "–æ—Ç–º–µ–Ω–∞":
                        update_settings_panel(c, chat_id, message_id)
                        c.telegram.bot.remove_message_handler(handle_new_hash)
                        return
                    config["fragment_api"]["hash"] = m.text.strip()
                    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                        json.dump(config, f, indent=4, ensure_ascii=False)
                    c.telegram.bot.send_message(chat_id, "‚úÖ –•—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    update_settings_panel(c, chat_id, message_id)
                    c.telegram.bot.remove_message_handler(handle_new_hash)

                c.telegram.bot.register_next_step_handler(call.message, handle_new_hash)

            elif data == "edit_cookie":
                current_cookie = config.get("fragment_api", {}).get("cookie", "–ù–µ –∑–∞–¥–∞–Ω–∞")
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
                c.telegram.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=sanitize_telegram_text(f"üç™ –¢–µ–∫—É—â–∞—è –∫—É–∫–∏:\n{current_cookie}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:"),
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )

                def handle_new_cookie(m):
                    if m.text.startswith('/'):
                        c.telegram.bot.send_message(chat_id, "‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.")
                        update_settings_panel(c, chat_id, message_id)
                        c.telegram.bot.remove_message_handler(handle_new_cookie)
                        return
                    if m.text.lower() == "–æ—Ç–º–µ–Ω–∞":
                        update_settings_panel(c, chat_id, message_id)
                        c.telegram.bot.remove_message_handler(handle_new_cookie)
                        return
                    config["fragment_api"]["cookie"] = m.text.strip()
                    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                        json.dump(config, f, indent=4, ensure_ascii=False)
                    c.telegram.bot.send_message(chat_id, "‚úÖ –ö—É–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                    update_settings_panel(c, chat_id, message_id)
                    c.telegram.bot.remove_message_handler(handle_new_cookie)

                c.telegram.bot.register_next_step_handler(call.message, handle_new_cookie)

            elif data == "edit_mnemonic":
                current_mnemonic = " ".join(config.get("MNEMONIC", []))
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
                c.telegram.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=sanitize_telegram_text(
                        f"üîê –¢–µ–∫—É—â–∞—è –º–Ω–µ–º–æ–Ω–∏–∫–∞:\n{current_mnemonic}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é (24 —Å–ª–æ–≤–∞):"),
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )

                def handle_new_mnemonic(m):
                    if m.text.startswith('/'):
                        c.telegram.bot.send_message(chat_id, "‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.")
                        update_settings_panel(c, chat_id, message_id)
                        c.telegram.bot.remove_message_handler(handle_new_mnemonic)
                        return
                    if m.text.lower() == "–æ—Ç–º–µ–Ω–∞":
                        update_settings_panel(c, chat_id, message_id)
                        c.telegram.bot.remove_message_handler(handle_new_mnemonic)
                        return
                    new_mnemonic = m.text.strip().split()
                    if len(new_mnemonic) != 24:
                        c.telegram.bot.send_message(chat_id, "‚ùå –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 24 —Å–ª–æ–≤–∞!")
                        return
                    config["MNEMONIC"] = new_mnemonic
                    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                        json.dump(config, f, indent=4, ensure_ascii=False)
                    c.telegram.bot.send_message(chat_id, "‚úÖ –ú–Ω–µ–º–æ–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                    update_settings_panel(c, chat_id, message_id)
                    c.telegram.bot.remove_message_handler(handle_new_mnemonic)

                c.telegram.bot.register_next_step_handler(call.message, handle_new_mnemonic)

            elif data == "edit_user_id":
                current_user_id = config.get("user_id", "–ù–µ –∑–∞–¥–∞–Ω")
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
                c.telegram.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=sanitize_telegram_text(f"üë§ –¢–µ–∫—É—â–∏–π User ID:\n{current_user_id}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π:"),
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )

                def handle_new_user_id(m):
                    if m.text.startswith('/'):
                        c.telegram.bot.send_message(chat_id, "‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.")
                        update_settings_panel(c, chat_id, message_id)
                        c.telegram.bot.remove_message_handler(handle_new_user_id)
                        return
                    if m.text.lower() == "–æ—Ç–º–µ–Ω–∞":
                        update_settings_panel(c, chat_id, message_id)
                        c.telegram.bot.remove_message_handler(handle_new_user_id)
                        return
                    try:
                        new_user_id = int(m.text.strip())
                    except ValueError:
                        c.telegram.bot.send_message(chat_id, "‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                        return
                    config["user_id"] = new_user_id
                    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                        json.dump(config, f, indent=4, ensure_ascii=False)
                    c.telegram.bot.send_message(chat_id, "‚úÖ User ID –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    update_settings_panel(c, chat_id, message_id)
                    c.telegram.bot.remove_message_handler(handle_new_user_id)

                c.telegram.bot.register_next_step_handler(call.message, handle_new_user_id)

            elif data == "back_to_main":
                update_config_panel(c, chat_id, message_id)

            elif data == "cancel":
                update_settings_panel(c, chat_id, message_id)

            elif data == "toggle_balance_format":
                config["USE_OLD_BALANCE"] = not config["USE_OLD_BALANCE"]
                balance_type = "—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–±–µ–∑ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 10^9)" if config[
                    "USE_OLD_BALANCE"] else "–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å –¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ 10^9)"
                with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                    json.dump(config, f, indent=4, ensure_ascii=False)
                c.telegram.bot.send_message(
                    chat_id,
                    sanitize_telegram_text(f"‚úÖ –§–æ—Ä–º–∞—Ç –±–∞–ª–∞–Ω—Å–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {balance_type}")
                )
                update_settings_panel(c, chat_id, message_id)

        except Exception as e:
            c.telegram.bot.send_message(
                chat_id,
                sanitize_telegram_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            )

    @c.telegram.bot.callback_query_handler(func=lambda call: call.data.startswith("refund_order_"))
    def refund_order_callback(call):
        order_id = call.data.replace("refund_order_", "")
        try:
            c.account.refund(order_id)
            msg = f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –≤–æ–∑–≤—Ä–∞—â—ë–Ω."
        except Exception as e:
            msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞–∫–∞–∑–∞ #{order_id}: {e}"
        c.telegram.bot.answer_callback_query(call.id, text=msg, show_alert=True)
        c.telegram.bot.send_message(chat_id, sanitize_telegram_text(msg))


BIND_TO_PRE_INIT = [init_commands]
BIND_TO_NEW_MESSAGE = [stars_auto]
BIND_TO_NEW_ORDER = [handle_new_order_stars]
BIND_TO_DELETE = []


def shutdown():
    payment_processor.loop.call_soon_threadsafe(payment_processor.loop.stop)
    payment_processor.thread.join()


atexit.register(shutdown)
