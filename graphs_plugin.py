from __future__ import annotations
import json
from pip._internal.cli.main import main

try:
    import matplotlib
except ImportError:
    main(["install", "-U", "matplotlib==3.8.2"])
    import matplotlib
try:
    import pandas as pd
except ImportError:
    main(["install", "-U", "pandas==2.2.0"])
    import pandas as pd
try:
    import mplcyberpunk
except ImportError:
    main(["install", "-U", "mplcyberpunk==0.7.1"])
    import mplcyberpunk
from datetime import datetime
from typing import TYPE_CHECKING
import io
import numpy as np
from telebot.types import InputMediaPhoto

from tg_bot import CBT

if TYPE_CHECKING:
    from cardinal import Cardinal
from FunPayAPI.updater.events import *
from os.path import exists
import tg_bot.CBT
import telebot
import time
from logging import getLogger

matplotlib.use('Agg')
import matplotlib.pyplot as plt
from telebot.types import InlineKeyboardMarkup as K, InlineKeyboardButton as B

NAME = "Graphs Plugin"
VERSION = "0.0.6"
DESCRIPTION = "–î–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω —Ä–∏—Å—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç–∞."
CREDITS = "@ago106"
CRD_LINK = "github.com/sidor0912/FunPayCardinal"
UUID = "ca9c7e14-706e-4563-9a41-e326a21d8472"
SETTINGS_PAGE = True
SETTINGS = {
    "head": 10,
    "min4line": 13,
    "graph1": True,
    "graph2": True,
    "graph3": True,
    "graph4": True,
    "graph5": True,
    "graph6": True,
    "graph7": True,
    "graph8": True,
    "graph9": True,
    "graph10": True,

}
LOGGER_PREFIX = "[GRAPHS_PLUGIN]"
logger = getLogger("FPC.graphs_plugin")
in_progress = False
CBT_TEXT_CHANGE_COUNT = "graphs_ChangeCount"
CBT_TEXT_EDITED = "graphs_Edited"
CBT_TEXT_SWITCH = "graphs_Switch"


def init_commands(cardinal: Cardinal, *args):
    if not cardinal.telegram:
        return
    tg = cardinal.telegram
    bot = tg.bot
    acc = cardinal.account

    if exists("storage/plugins/graphs_settings.json"):
        with open("storage/plugins/graphs_settings.json", "r", encoding="utf-8") as f:
            global SETTINGS
            settings = json.loads(f.read())
            SETTINGS.update(settings)

    def switch(call: telebot.types.CallbackQuery):
        key = call.data.split(":")[-1]
        SETTINGS[key] = not SETTINGS[key]
        save_config()
        open_settings(call)

    def open_settings(call: telebot.types.CallbackQuery):
        keyboard = K()
        keyboard.add(B(f"Head: {SETTINGS['head']}", callback_data=f"{CBT_TEXT_CHANGE_COUNT}:head"))
        keyboard.add(B(f"Min4Line: {SETTINGS['min4line']}", callback_data=f"{CBT_TEXT_CHANGE_COUNT}:min4line"))
        keyboard.row_width = 2
        for i in range(1, 10, 2):
            keyboard.row(
                B(f"{i} : {'üü¢ –≤–∫–ª.' if SETTINGS['graph' + str(i)] else 'üî¥ –≤—ã–∫–ª.'}",
                  callback_data=f"{CBT_TEXT_SWITCH}:graph{i}"),
                B(f"{i + 1} : {'üü¢ –≤–∫–ª.' if SETTINGS['graph' + str(i + 1)] else 'üî¥ –≤—ã–∫–ª.'}",
                  callback_data=f"{CBT_TEXT_SWITCH}:graph{i + 1}")
            )
        keyboard.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_PLUGIN}:{UUID}:0"))

        bot.edit_message_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤.\n\n"
                              "<b>Head:</b> –î–ª—è —Å—Ç–æ–ª–±—á–∞—Ç—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–µ—Ä–≤—ã–µ <u>X</u> –∑–Ω–∞—á–µ–Ω–∏–π.\n\n"
                              "<b>Min4Line:</b> –†–∏—Å–æ–≤–∞—Ç—å –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–µ –º–µ–Ω–µ–µ <u>X</u>.\n"
                              "–ù–æ–º–µ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–æ–Ω—Ü–µ –ø–æ–¥–ø–∏—Å–∏ –∫ –∫–∞–∂–¥–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ /graphs",
                              call.message.chat.id, call.message.id,
                              reply_markup=keyboard)
        bot.answer_callback_query(call.id)

    def edit(call: telebot.types.CallbackQuery):
        result = bot.send_message(call.message.chat.id,
                                  f"<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: </b>{SETTINGS[call.data.split(':')[-1]]}\n\n"
                                  f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
                                  reply_markup=tg_bot.static_keyboards.CLEAR_STATE_BTN())
        tg.set_state(call.message.chat.id, result.id, call.from_user.id,
                     f"{CBT_TEXT_EDITED}:{call.data.split(':')[-1]}", {"k": call.data.split(':')[-1]})
        bot.answer_callback_query(call.id)

    def save_config():
        with open("storage/plugins/graphs_settings.json", "w", encoding="utf-8") as f:
            global SETTINGS
            f.write(json.dumps(SETTINGS, indent=4, ensure_ascii=False))

    def edited(message: telebot.types.Message):
        text = message.text
        key = tg.user_states[message.chat.id][message.from_user.id]["data"]["k"]
        try:
            count = int(text)
        except:
            bot.reply_to(message, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                         reply_markup=tg_bot.static_keyboards.CLEAR_STATE_BTN())
            return
        tg.clear_state(message.chat.id, message.from_user.id, True)
        keyboard = K() \
            .row(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}"))
        SETTINGS[key] = count
        save_config()
        bot.reply_to(message, f"‚úÖ –£—Å–ø–µ—Ö: {count}", reply_markup=keyboard)

    def orders_generator(days: list(float), new_mes: telebot.types.Message):
        now = datetime.now()
        days.sort()
        max_seconds = days[-1] * 3600 * 24
        next_order_id, all_sales, locale, subcs = acc.get_sales()
        c = 1
        while next_order_id != None and (now - all_sales[-1].date).total_seconds() < max_seconds:
            time.sleep(1)
            for i in range(2, -1, -1):
                try:
                    next_order_id, new_sales, locale, subcs = acc.get_sales(start_from=next_order_id,
                                                                            sudcategories=subcs,
                                                                            locale=locale)
                    break
                except:
                    logger.warning(f"{LOGGER_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {i}")
                    logger.debug("TRACEBACK", exc_info=True)
                    time.sleep(2)
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å")
            all_sales += new_sales
            str4tg = f"–û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞. –ó–∞–ø—Ä–æ—Å N{c}. –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: <a href='https://funpay.com/orders/{next_order_id}/'>{next_order_id}</a>"
            logger.debug(f"{LOGGER_PREFIX} {str4tg}")
            if c % 5 == 0:
                try:
                    msg = bot.edit_message_text(str4tg, new_mes.chat.id, new_mes.id)
                    logger.debug(f"{LOGGER_PREFIX} –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ. {msg}")
                except:
                    logger.warning(f"{LOGGER_PREFIX} –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                    logger.debug("TRACEBACK", exc_info=True)
            while (days and (now - all_sales[-1].date).total_seconds() > days[0] * 3600 * 24):
                temp_list = [sale for sale in all_sales if (now - sale.date).total_seconds() < days[0] * 3600 * 24]
                bot.edit_message_text(f"–ó–∞–∫–æ–Ω—á–∏–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days[0]} –¥–Ω..", new_mes.chat.id,
                                      new_mes.id)
                yield days[0], temp_list
                del days[0]
            c += 1
        all_sales = [sale for sale in all_sales if (now - sale.date).total_seconds() < max_seconds]
        if all_sales and days:
            yield days[0], all_sales

    def get_color(status: OrderStatuses):
        try:
            return ("blue", "green", "orange")[status]
        except:
            return "black"

    def get_text(status: OrderStatuses):
        try:
            return ("–û–ø–ª–∞—á–µ–Ω", "–ó–∞–∫—Ä—ã—Ç", "–í–æ–∑–≤—Ä–∞—Ç")[status]
        except:
            return "–ö–∞–∫–æ–π-—Ç–æ —Å—Ç–∞—Ç—É—Å"

    def my_cyberpunk(ax, bars=None):
        # mplcyberpunk.make_lines_glow(ax)
        # mplcyberpunk.add_underglow(ax)
        mplcyberpunk.add_gradient_fill(ax=ax)
        # mplcyberpunk.add_glow_effects(ax, gradient_fill=True)
        # mplcyberpunk.add_gradient_fill(ax)
        try:
            mplcyberpunk.make_scatter_glow(ax)
        except:
            pass
        if bars is not None:
            mplcyberpunk.add_bar_gradient(bars.patches, ax=ax, horizontal=True)

    def df_update_dates(df):
        df['date'] = pd.to_datetime(df['date']).dt.floor('D')  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–Ω—è

        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–∞—Ç –∏ —Å—Ç–∞—Ç—É—Å–æ–≤
        all_dates = pd.date_range(start=df['date'].min(), end=df['date'].max(), freq='D')
        all_statuses = df['status'].unique()
        all_combinations = pd.MultiIndex.from_product([all_dates, all_statuses], names=['date', 'status'])

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏
        full_df = pd.DataFrame(index=all_combinations).reset_index()

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–æ–º
        result_df = pd.merge(full_df, df, how='left', on=['date', 'status']).fillna(0)
        # –í–∞—à –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º

        df = result_df
        df['date'] = pd.to_datetime(df['date'])

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –≥–æ–¥–æ–º, –º–µ—Å—è—Ü–µ–º –∏ –¥–Ω–µ–º
        df['year'] = df['date'].dt.to_period('Y')
        df['month'] = df['date'].dt.to_period('M')
        df['day'] = df['date'].dt.to_period('d')
        return df

    def draw_price_time(orders_list, currency, min4line: int):
        with plt.style.context('cyberpunk'):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ DataFrame
            data = {
                'date': [order.date for order in orders_list if str(order.currency) == currency],
                'price': [order.price for order in orders_list if str(order.currency) == currency],
                'status': [order.status.value for order in orders_list if str(order.currency) == currency]
            }
            df = pd.DataFrame(data)
            df = df_update_dates(df)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –æ–¥–Ω–æ–º—É –≥–æ–¥—É –∏–ª–∏ –º–µ—Å—è—Ü—É
            unique_years = df['year'].nunique() > 1
            unique_months = df['month'].nunique() > 1

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ–¥—É, –º–µ—Å—è—Ü—É –∏ –¥–Ω—é
            orders_by_year = df.groupby(['year', 'status']).price.sum().unstack(fill_value=0)
            orders_by_month = df.groupby(['month', 'status']).price.sum().unstack(fill_value=0)
            orders_by_day = df.groupby(['day', 'status']).price.sum().unstack(fill_value=0)

            rows = int(unique_years) + int(unique_months) + 1
            # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏
            fig, axs = plt.subplots(rows, 1, figsize=(10, 5 * rows))
            if type(axs) != np.ndarray:
                axs = [axs]
            ord_data = [orders_by_day]
            if unique_months:
                ord_data.append(orders_by_month)
            if unique_years:
                ord_data.append(orders_by_year)

            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å —Ü–≤–µ—Ç–∞–º–∏
            for ax, orders_data, x_title in zip(axs, ord_data, ['–î–µ–Ω—å', "–ú–µ—Å—è—Ü", "–ì–æ–¥"]):
                bars = None
                if len(orders_data) < min4line:
                    colors = {0: 'blue', 1: 'green', 2: 'orange'}
                    labels = {0: '–û–ø–ª–∞—á–µ–Ω', 1: '–ó–∞–∫—Ä—ã—Ç', 2: '–í–æ–∑–≤—Ä–∞—Ç'}
                    # –°—Ç—Ä–æ–∏–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É, –µ—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–µ –±–æ–ª–µ–µ 10
                    bars = orders_data[::-1].plot(kind='barh', stacked=False, ax=ax,
                                                  color=[colors[col] for col in orders_data.columns])

                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏ —Å —Å—É–º–º–æ–π
                    for rect in bars.patches:
                        width = rect.get_width()
                        ax.annotate((int(width) if int(width) == width else width.round(2)) if width else "",
                                    xy=(width, rect.get_y() + rect.get_height() / 2),
                                    xytext=(3, 0),  # 3 points horizontal offset
                                    textcoords="offset points",
                                    ha='left', va='center')

                    ax.legend([labels[lb] for lb in orders_data.columns])
                else:
                    # –°—Ç—Ä–æ–∏–º –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –±–æ–ª–µ–µ 10
                    for status in orders_data.columns:
                        orders_data[status].plot(ax=ax, label=get_text(status), color=get_color(status), marker=".")

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É –Ω–∞ –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
                    ax.grid(True)

                    ax.legend()
                my_cyberpunk(ax, bars)
                ax.set_title(f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ ({currency}) / {x_title}')
                ax.set_xlabel("")
                ax.set_ylabel(f'')

            plt.tight_layout()
            fig.text(0.01, 0.99, f'FPC {NAME} v{VERSION} by @sidor0912\n{CRD_LINK}', ha='left', va='top',
                     fontsize=10, color='gray', alpha=0.5)
            buf = io.BytesIO()
            fig.savefig(buf, format='png', dpi=300)
            buf.seek(0)
            plt.close(fig)

            return buf

    def draw_k_sales_time(orders_list, min4line: int):
        with plt.style.context('cyberpunk'):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ DataFrame
            data = {
                'date': [order.date for order in orders_list],
                'status': [order.status.value for order in orders_list],
                "add_to_k": [1 for _ in orders_list]
            }
            df = pd.DataFrame(data)
            df = df_update_dates(df)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –æ–¥–Ω–æ–º—É –≥–æ–¥—É –∏–ª–∏ –º–µ—Å—è—Ü—É
            unique_years = df['year'].nunique() > 1
            unique_months = df['month'].nunique() > 1

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ–¥—É, –º–µ—Å—è—Ü—É –∏ –¥–Ω—é
            orders_by_year = df.groupby(['year', 'status']).add_to_k.sum().unstack(fill_value=0)
            orders_by_month = df.groupby(['month', 'status']).add_to_k.sum().unstack(fill_value=0)
            orders_by_day = df.groupby(['day', 'status']).add_to_k.sum().unstack(fill_value=0)

            rows = int(unique_years) + int(unique_months) + 1

            # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏
            fig, axs = plt.subplots(rows, 1, figsize=(10, 5 * rows))
            if type(axs) != np.ndarray:
                axs = [axs]
            ord_data = [orders_by_day]
            if unique_months:
                ord_data.append(orders_by_month)
            if unique_years:
                ord_data.append(orders_by_year)

            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å —Ü–≤–µ—Ç–∞–º–∏
            for ax, orders_data, x_title in zip(axs, ord_data, ['–î–µ–Ω—å', "–ú–µ—Å—è—Ü", "–ì–æ–¥"]):
                bars = None
                if len(orders_data) < min4line:
                    colors = {0: 'blue', 1: 'green', 2: 'orange'}
                    labels = {0: '–û–ø–ª–∞—á–µ–Ω', 1: '–ó–∞–∫—Ä—ã—Ç', 2: '–í–æ–∑–≤—Ä–∞—Ç'}
                    # –°—Ç—Ä–æ–∏–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É, –µ—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–µ –±–æ–ª–µ–µ 10
                    with plt.style.context('cyberpunk'):
                        bars = orders_data[::-1].plot(kind='barh', stacked=False, ax=ax,
                                                      color=[colors[col] for col in orders_data.columns])

                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
                    for rect in bars.patches:
                        width = rect.get_width()
                        ax.annotate((int(width) if int(width) == width else width.round(2)) if width else "",
                                    xy=(width, rect.get_y() + rect.get_height() / 2),
                                    xytext=(3, 0),  # 3 points horizontal offset
                                    textcoords="offset points",
                                    ha='left', va='center')
                    ax.legend([labels[lb] for lb in orders_data.columns])

                else:
                    # –°—Ç—Ä–æ–∏–º –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –±–æ–ª–µ–µ 10
                    for status in orders_data.columns:
                        orders_data[status].plot(ax=ax, label=get_text(status), color=get_color(status), marker=".")

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É –Ω–∞ –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
                    ax.grid(True)

                    ax.legend()

                ax.set_title(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ / {x_title}')
                ax.set_xlabel("")
                ax.set_ylabel('')
                my_cyberpunk(ax, bars)
            plt.tight_layout()
            fig.text(0.01, 0.99, f'FPC {NAME} v{VERSION} by @sidor0912\n{CRD_LINK}', ha='left', va='top',
                     fontsize=10, color='gray', alpha=0.5)
            buf = io.BytesIO()
            fig.savefig(buf, format='png', dpi=300)
            buf.seek(0)
            plt.close(fig)

            return buf

    def draw_bar_charts(orders_list, parameter, head: int):
        with plt.style.context('cyberpunk'):
            # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
            data = {
                'subcategory_name': [order.subcategory_name for order in orders_list],
                'buyer_username': [order.buyer_username for order in orders_list],
                'game_name': [order.subcategory_name.split(",")[0] for order in orders_list],
                'status': [order.status.value for order in orders_list]
            }
            df = pd.DataFrame(data)

            # –í—ã–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            if parameter == 'subcategory_name':
                group_by_parameter = 'subcategory_name'
                title = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º'
            elif parameter == 'buyer_username':
                group_by_parameter = 'buyer_username'
                title = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –Ω–∏–∫–Ω–µ–π–º–∞–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π'
            elif parameter == 'game_name':
                group_by_parameter = 'game_name'
                title = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∏–≥—Ä'
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {parameter}")

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
            orders_by_parameter = df.groupby([group_by_parameter, 'status']).size().unstack(fill_value=0)
            sorted_orders = orders_by_parameter.sum(axis=1).sort_values(ascending=False).index
            orders_by_parameter = orders_by_parameter.loc[sorted_orders]
            # orders_by_parameter = df.groupby([group_by_parameter]).size().sort_values(ascending=False)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-X –∑–Ω–∞—á–µ–Ω–∏–π
            top_x_orders = orders_by_parameter.head(head)[::-1]

            # –°—Ç—Ä–æ–∏–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
            fig, ax = plt.subplots(figsize=(10, 10))
            colors = {0: 'blue', 1: 'green', 2: 'orange'}
            labels = {0: '–û–ø–ª–∞—á–µ–Ω', 1: '–ó–∞–∫—Ä—ã—Ç', 2: '–í–æ–∑–≤—Ä–∞—Ç'}
            bars = top_x_orders.plot(kind='barh', stacked=False, ax=ax,
                                     color=[colors[col] for col in top_x_orders.columns])

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            for rect in bars.patches:
                width = rect.get_width()
                ax.annotate((int(width) if int(width) == width else width.round(2)) if width else "",
                            xy=(width, rect.get_y() + rect.get_height() / 2),
                            xytext=(3, 0),  # 3 points horizontal offset
                            textcoords="offset points",
                            ha='left', va='center')
            ax.legend([labels[lb] for lb in top_x_orders.columns], loc='lower right')

            ax.set_title(title)
            ax.set_xlabel("")
            ax.set_ylabel('')
            my_cyberpunk(ax, bars)
            plt.tight_layout()
            fig.text(0.01, 0.99, f'FPC {NAME} v{VERSION} by @sidor0912\n{CRD_LINK}', ha='left', va='top',
                     fontsize=10, color='gray', alpha=0.5)
            buf = io.BytesIO()
            fig.savefig(buf, format='png', dpi=300)
            buf.seek(0)
            plt.close(fig)

            return buf

    def draw_combined_charts(orders_list, parameter, head):
        with plt.style.context('cyberpunk'):
            currencies = ['‚ÇΩ', '$', '‚Ç¨']
            non_empty_plots = 0  # –°—á–µ—Ç—á–∏–∫ –Ω–µ–ø—É—Å—Ç—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤

            # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫
            set_curr = set([str(order.currency) for order in orders_list])
            len_curr = len(set_curr)
            fig, axes = plt.subplots(len_curr, 1, figsize=(10, 5 * (2 if len_curr == 1 else len_curr)))
            if type(axes) != np.ndarray:
                axes = [axes]
            for currency, ax in zip(sorted(list(set_curr)), axes):
                currency_orders = [order for order in orders_list if str(order.currency) == currency]
                # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
                data = {
                    'subcategory_name': [order.subcategory_name for order in currency_orders],
                    'buyer_username': [order.buyer_username for order in currency_orders],
                    'game_name': [order.subcategory_name.split(",")[0] for order in currency_orders],
                    'status': [order.status.value for order in currency_orders],
                    'price': [order.price for order in currency_orders]
                }
                df = pd.DataFrame(data)

                # –í—ã–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                if parameter == 'subcategory_name':
                    group_by_parameter = 'subcategory_name'
                    title = f'–°—É–º–º–∞ —Ü–µ–Ω –∑–∞–∫–∞–∑–æ–≤ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ({currency})'
                elif parameter == 'buyer_username':
                    group_by_parameter = 'buyer_username'
                    title = f'–°—É–º–º–∞ —Ü–µ–Ω –∑–∞–∫–∞–∑–æ–≤ –ø–æ –Ω–∏–∫–Ω–µ–π–º–∞–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π ({currency})'
                elif parameter == 'game_name':
                    group_by_parameter = 'game_name'
                    title = f'–°—É–º–º–∞ —Ü–µ–Ω –∑–∞–∫–∞–∑–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∏–≥—Ä ({currency})'
                else:
                    raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {parameter}")

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, —Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É —Ü–µ–Ω –∑–∞–∫–∞–∑–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
                orders_by_parameter = df.groupby([group_by_parameter, 'status'])['price'].sum().unstack(fill_value=0)
                sorted_orders = orders_by_parameter.sum(axis=1).sort_values(ascending=False).index
                orders_by_parameter = orders_by_parameter.loc[sorted_orders]

                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-X –∑–Ω–∞—á–µ–Ω–∏–π
                top_x_orders = orders_by_parameter.head(head)[::-1]

                # –°—Ç—Ä–æ–∏–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
                colors = {0: 'blue', 1: 'green', 2: 'orange'}
                labels = {0: '–û–ø–ª–∞—á–µ–Ω', 1: '–ó–∞–∫—Ä—ã—Ç', 2: '–í–æ–∑–≤—Ä–∞—Ç'}
                # –°—Ç—Ä–æ–∏–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É, –µ—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–µ –±–æ–ª–µ–µ 10
                bars = top_x_orders.plot(kind='barh', stacked=False, ax=ax,
                                         color=[colors[col] for col in top_x_orders.columns])

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏ —Å —Å—É–º–º–æ–π —Ü–µ–Ω
                for rect in bars.patches:
                    width = rect.get_width()
                    ax.annotate(
                        f"{(int(width) if int(width) == width else width.round(2))} {currency}" if width else "",
                        xy=(width, rect.get_y() + rect.get_height() / 2),
                        xytext=(3, 0),  # 3 points horizontal offset
                        textcoords="offset points",
                        ha='left', va='center')
                ax.legend([labels[lb] for lb in top_x_orders.columns], loc='lower right')

                ax.set_title(title)
                ax.set_xlabel("")
                ax.set_ylabel('')
                my_cyberpunk(ax, bars)
                non_empty_plots += 1

            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø—É—Å—Ç—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if non_empty_plots > 0:

                plt.tight_layout()
                fig.text(0.01, 0.99, f'FPC {NAME} v{VERSION} by @sidor0912\n{CRD_LINK}', ha='left', va='top',
                         fontsize=10, color='gray', alpha=0.5)
                buf = io.BytesIO()
                fig.savefig(buf, format='png', dpi=300)
                buf.seek(0)
                plt.close(fig)

                return buf
            else:
                plt.close()
                return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–µ–ø—É—Å—Ç—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤

    def get_graphs(m: telebot.types.Message):
        global in_progress
        if in_progress:
            bot.reply_to(m, "–£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /restart")
            return
        in_progress = True
        new_mes = bot.reply_to(m, "–°–∫–∞–Ω–∏—Ä—É—é –∑–∞–∫–∞–∑—ã (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è)...")
        days = list(map(float, m.text.split(" ")[1:]))
        if not days:
            bot.edit_message_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                                  "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: \n<code>/graphs 7 30 365 9999</code>\n, –≥–¥–µ —á–∏—Å–ª–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π",
                                  new_mes.chat.id, new_mes.id)
            in_progress = False
            return
        try:
            for days, orders in orders_generator(days=days, new_mes=new_mes):
                try:
                    global SETTINGS
                    min4line = SETTINGS["min4line"]
                    head = SETTINGS["head"]
                    caption = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è <u><b>{acc.username} ({acc.id})</b></u> –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ <u><b>{int(days)}</b></u> –¥–Ω.\n" \
                              f"–†–∏—Å–æ–≤–∞—Ç—å –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–µ –º–µ–Ω–µ–µ <u><b>{min4line}</b></u>.\n" \
                              f"–î–ª—è —Å—Ç–æ–ª–±—á–∞—Ç—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–µ—Ä–≤—ã–µ <u><b>{head}</b></u> –∑–Ω–∞—á–µ–Ω–∏–π.\n\n" \
                              f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é {NAME} v{VERSION} by {CREDITS}"
                    photos = []
                    if SETTINGS[a := "graph1"]:
                        photos.append(InputMediaPhoto(draw_k_sales_time(orders, min4line), caption=f"{caption}\n\n{a}",
                                                      parse_mode="HTML"))
                    currencies = sorted(set([str(i.currency) for i in orders]))
                    list_curr = ["$", "‚Ç¨", "‚ÇΩ"]
                    for curr in currencies:
                        graph_num = list_curr.index(curr) + 2
                        if SETTINGS[a := f"graph{graph_num}"]:
                            photos.append(
                                InputMediaPhoto(draw_price_time(orders, curr, min4line), caption=f"{caption}\n\n{a}",
                                                parse_mode="HTML"))
                    if SETTINGS[a := "graph5"]:
                        photos.append(InputMediaPhoto(draw_bar_charts(orders, parameter="subcategory_name", head=head),
                                                      caption=f"{caption}\n\n{a}", parse_mode="HTML"))
                    if SETTINGS[a := "graph6"]:
                        photos.append(
                            InputMediaPhoto(draw_combined_charts(orders, parameter="subcategory_name", head=head),
                                            caption=f"{caption}\n\n{a}", parse_mode="HTML"))
                    if SETTINGS[a := "graph7"]:
                        photos.append(InputMediaPhoto(draw_bar_charts(orders, parameter="game_name", head=head),
                                                      caption=f"{caption}\n\n{a}", parse_mode="HTML"))
                    if SETTINGS[a := "graph8"]:
                        photos.append(
                            InputMediaPhoto(draw_combined_charts(orders, parameter="game_name", head=head),
                                            caption=f"{caption}\n\n{a}",
                                            parse_mode="HTML"))
                    if SETTINGS[a := "graph9"]:
                        photos.append(InputMediaPhoto(draw_bar_charts(orders, parameter="buyer_username", head=head),
                                                      has_spoiler=True, caption=f"{caption}\n\n{a}", parse_mode="HTML"))

                    if SETTINGS[a := "graph10"]:
                        photos.append(
                            InputMediaPhoto(draw_combined_charts(orders, parameter="buyer_username", head=head),
                                            has_spoiler=True, caption=f"{caption}\n\n{a}", parse_mode="HTML"))

                    bot.send_media_group(new_mes.chat.id, photos)
                    bot.send_message(new_mes.chat.id, f"‚¨ÜÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {int(days)} –¥–Ω. ‚¨ÜÔ∏è")

                except:
                    in_progress = False
                    logger.error(f"{LOGGER_PREFIX} –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
                    logger.debug("TRACEBACK", exc_info=True)
                    bot.edit_message_text("‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.", new_mes.chat.id, new_mes.id)
                    return
        except:
            in_progress = False
            logger.error(f"{LOGGER_PREFIX} ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.")
            logger.debug("TRACEBACK", exc_info=True)
            bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.", new_mes.chat.id, new_mes.id)
            return
        in_progress = False
        bot.edit_message_text("üòé –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", new_mes.chat.id, new_mes.id)

    tg.msg_handler(get_graphs, commands=["graphs"])
    cardinal.add_telegram_commands(UUID, [
        ("graphs", "–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫–∏", True)
    ])
    tg.cbq_handler(edit, lambda c: f"{CBT_TEXT_CHANGE_COUNT}" in c.data)
    tg.cbq_handler(open_settings, lambda c: f"{CBT.PLUGIN_SETTINGS}:{UUID}" in c.data)
    tg.msg_handler(edited, func=lambda m: tg.check_state(m.chat.id, m.from_user.id, f"{CBT_TEXT_EDITED}:head"))
    tg.msg_handler(edited, func=lambda m: tg.check_state(m.chat.id, m.from_user.id, f"{CBT_TEXT_EDITED}:min4line"))
    tg.cbq_handler(switch, lambda c: f"{CBT_TEXT_SWITCH}" in c.data)


BIND_TO_PRE_INIT = [init_commands]
BIND_TO_DELETE = None
